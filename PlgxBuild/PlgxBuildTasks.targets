<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!--
  This file is part of the PlgxBuildTasks distribution:
  https://github/walterpg/PlgxBuildTasks

  Copyright(C) 2021 Walter Goodwin

  PlgxBuildTasks is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  PlgxBuildTasks is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with PlgxBuildTasks.  If not, see <https://www.gnu.org/licenses/>.
  -->

  <!--
    <PlgxArchiveFileName> can be specified to override the base
    file name of the .PLGX archive.
  -->
  <Target Name="PlgxGetArchiveFileName"
          Condition=" '$(PlgxArchiveFileName)' == '' "
          Outputs="PlgxArchiveFileName"
  >
    <PropertyGroup>
      <PlgxArchiveFileName>$(AssemblyName)</PlgxArchiveFileName>
    </PropertyGroup>
  </Target>

  <!--
    <PlgxOuputFolder> specifies the directory for the generated .PLGX
    file.
  -->
  <Target Name="PlgxGetOutputFolder" Condition=" '$(PlgxOuputFolder)' == '' "
      Outputs="$(PlgxOutputFolder)">
    <PropertyGroup>
      <PlgxOutputFolder>$(MSBuildProjectDirectory)\$(OutputPath)</PlgxOutputFolder>
    </PropertyGroup>
  </Target>

  <!--
    <PlgxAssemblyName> specifies the name of the plugin assembly (no .dll
    suffix) and namespace.  If not specified, this value defaults to the
    <AssemblyName> MSBuild property value. 
  -->
  <Target Name="PlgxGetAssemblyName" Condition=" '$(PlgxAssemblyName)' == '' "
      Outputs="$(PlgxAssemblyName)">
    <PropertyGroup>
      <PlgxAssemblyName>$(AssemblyName)</PlgxAssemblyName>
    </PropertyGroup>
  </Target>

  <!--
    <PlgxUseCompiledResource> allows optional use of MSBuild-generated resources
    for the <EmbeddedResource> items in the project.  This saves some space
    in the .PLGX and improves the efficiency of KeePass' compilation of the
    plugin.  Defaults to 'false'.
  -->
  <Target Name="PlgxGetUseCompiledResource"
      Outputs="PlgxUseCompiledResource">
    <Error Condition=" '$(PlgxUseCompiledResource)' != '' and '$(PlgxUseCompiledResource.ToUpper())' != 'TRUE' and '$(PlgxUseCompiledResource.ToUpper())' != 'FALSE' "
         Text="Invalid value for &lt;PlgxUseCompiledResource&gt; property; the value should be 'true' or 'false'."/>
    <PropertyGroup Condition=" '$(PlgxUseCompiledResource)' == '' ">
      <PlgxUseCompiledResource>false</PlgxUseCompiledResource>
    </PropertyGroup>
  </Target>

  <!--
    <PlgxTargetOs> is used to specify the operating system "prerequiste", like
    the "plgx-prereq-os:" KeePass command-line parameter.
  -->
  <Target Name="PlgxGetTargetOs"
      Condition=" '$(PlgxTargetOs)' != '' ">
    <ErrorLog Condition=" '$(PlgxTargetOs.ToUpper())' != 'UNIX' and '$(PlgxTargetOs.ToUpper())' != 'WINDOWS' "
      Text="&lt;PlgxTargetOs&gt; value not valid.  Currently, KeePass only recognizes the values 'Windows', 'Unix', or the empty string."/>
  </Target>

  <!--
    <PlgxTargetPtrSize> is used to specify the pointer size "prerequiste", like
    the "plgx-prereq-ptr:" KeePass command-line parameter.
  -->
  <Target Name="PlgxGetTargetPtrSize"
      Condition=" '$(PlgxTargetPtrSize)' != '' ">
    <Error Condition=" '$(PlgxTargetPtrSize)' != '8' and '$(PlgxTargetPtrSize)' != '4' "
      Text="&lt;PlgxTargetPtrSize&gt; value invalid.  If specified, the value must be either '4' or '8'."/>
  </Target>

  <!--
    <ProductName> can be specified in SDK-style projects to generate
    AssemblyProductAttribute required by KeePass to identify plugin
    assemblies.  This target validates that.
  -->
  <Target Name="PlgxValidateProductName" 
      Condition=" '$(GenerateAssemblyInfo)' == 'true' and '$(Product)' != '' ">
    <Error Condition=" '$(Product)' != 'KeePass Plugin' "
      Text="&lt;Product&gt; property not set to 'KeePass Plugin', so KeePass will not load this plugin. Either set the property in the project, or disable AssemblyInfo.cs generation and explicitly code AssemblyProductAttribute with 'KeePass Plugin'."/>
  </Target>
  
  <!--
    <PlgxTargetNetFramework> can be specified to override the target
    framework version manifested in the .PLGX archive.
  -->
  <Target Name="PlgxGetTargetNetFramework"
          Condition=" '$(PlgxTargetNetFramework)' == '' "
          Outputs="PlgxTargetNetFramework"
  >
    <PropertyGroup>
      <PlgxTargetNetFramework>$(TargetFrameworkVersion)</PlgxTargetNetFramework>
    </PropertyGroup>
  </Target>
  
  <!--
    Define default value for directory path of copied references.
  -->
  <Target Name="PlgxGetProjectReferencesFolderName"
      Condition=" '$(PlgxProjectReferencesFolderName)' == '' "
      Outputs="PlgxProjectReferencesFolderName">
    <PropertyGroup>
      <PlgxProjectReferencesFolderName>___PLGX_References</PlgxProjectReferencesFolderName>
    </PropertyGroup>
  </Target>
  
  <!--
    Define default value for directory path of satellite assemblies.
  -->
  <Target Name="PlgxGetProjectSatelliteResourcesFolderName" Condition=" '$(PlgxProjectSatelliteAssembliesFolderName)' == '' "
      Outputs="PlgxProjectSatelliteAssembliesFolderName">
    <PropertyGroup>
      <PlgxProjectSatelliteAssembliesFolderName>___PLGX_Satellites</PlgxProjectSatelliteAssembliesFolderName>
    </PropertyGroup>
  </Target>

  <!--
    Extend 'clean' target to remove output file.
  -->
  <Target Name="PlgxDeleteOutputFile" DependsOnTargets="PlgxGetArchiveFileName;PlgxGetOutputFolder">
    <Delete Files="$(PlgxOutputFolder)$(PlgxArchiveFileName).plgx" />
  </Target>

  <PropertyGroup>
    <PlgxBuildDependsOn>
      PlgxGetProjectReferencesFolderName;
      PlgxGetProjectSatelliteResourcesFolderName;
      PlgxValidateProductName;
      PlgxGetUseCompiledResource;
      PlgxGetAssemblyName;
      PlgxGetOutputFolder;
      PlgxGetTargetOs;
      PlgxGetTargetPtrSize;
      PlgxGetTargetNetFramework;
      PlgxGetArchiveFileName;
      Build
    </PlgxBuildDependsOn>
    <CleanDependsOn>PlgxDeleteOutputFile;$(CleanDependsOn)</CleanDependsOn>
  </PropertyGroup>

  <UsingTask TaskName="PlgxBuildTask"  AssemblyFile="$(PlgxBuildTasksDir)PlgxBuildTasks.dll" />
  
  <Target Name="PlgxBuild" DependsOnTargets="$(PlgxBuildDependsOn)">
    <PlgxBuildTask PlgxFileFolder="$(PlgxOutputFolder)"
        ProjectReferencesFolderName="$(PlgxProjectReferencesFolderName)"
        ProjectSatelliteAssembliesFolderName="$(PlgxProjectSatelliteAssembliesFolderName)"
        AssemblyName="$(PlgxAssemblyName)"
        ArchiveBaseFileName="$(PlgxArchiveFileName)"
        EmbeddedResource="@(EmbeddedResource)"
        ProjectFileFullPath="$(MSBuildProjectFullPath)"
        Compile="@(Compile)"
        SatelliteResource="@(IntermediateSatelliteAssembliesWithTargetPath)"
        None="@(None)"
        Content="@(Content)"
        Reference="@(Reference)"
        ResolvedReference="@(ReferenceCopyLocalPaths)"
        TargetOsMoniker="$(PlgxTargetOs)"
        TargetPointerSize="$(PlgxTargetPtrSize)"
        TargetNetFramework="$(PlgxTargetNetFramework)"
        TargetKpVersion="$(PlgxTargetKpVersion)"
        UseCompiledResource="$(PlgxUseCompiledResource)"
    />
    <Message Importance="high"
        Text="$(PlgxAssemblyName) -> $(PlgxOutputFolder)$(PlgxArchiveFileName).plgx"
    /> 
  </Target>
</Project>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!--
  This file is part of the PlgxBuildTasks distribution:
  https://github.com/walterpg/plgx-build-tasks

  Copyright(C) 2021 Walter Goodwin

  PlgxBuildTasks is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  PlgxBuildTasks is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with PlgxBuildTasks.  If not, see <https://www.gnu.org/licenses/>.
  -->

  <!--
    By default, run the PlgxBuild target on Release builds.
  -->
  <PropertyGroup Condition=" '$(GeneratePlgx)' == '' and '$(Configuration)' == 'Release' ">
    <GeneratePlgx>true</GeneratePlgx>
  </PropertyGroup>

  <!--
    Define default value for directory path of copied references.
  -->
  <PropertyGroup Condition=" '$(PlgxProjectReferencesFolderName)' == '' ">
    <PlgxReferencesArchivedFolderName>___PLGX_References</PlgxReferencesArchivedFolderName>
  </PropertyGroup>

  <!--
    Define default value for directory path of satellite assemblies.
  -->
  <PropertyGroup Condition=" '$(PlgxSatelliteAssembliesArchivedFolderName)' == '' ">
    <PlgxSatelliteAssembliesArchivedFolderName>___PLGX_Satellites</PlgxSatelliteAssembliesArchivedFolderName>
  </PropertyGroup>

  <!--
    <PlgxUseCompiledResource> allows optional use of MSBuild-generated resources
    for the <EmbeddedResource> items in the project.  This saves some space
    in the .PLGX and improves the efficiency of KeePass' compilation of the
    plugin.  Defaults to 'false'.
  -->
  <PropertyGroup Condition=" '$(PlgxUseCompiledResource)' == '' ">
    <PlgxUseCompiledResource>false</PlgxUseCompiledResource>
  </PropertyGroup>

  <!--
    <PlgxTargetNetFramework> specifies the .NET Framework
    "prerequisite" like the "plgx-prereq-fw:" KeePass command-line
    parameter.  Defaults to $(TargetFrameworkVersion) (e.g., "v4.7").
  -->
  <Target Name="EnsurePlgxTargetNetFramework" Outputs="PlgxTargetNetFramework"
          Condition=" '$(PlgxTargetNetFramework)' == '' ">
    <PropertyGroup>
      <PlgxTargetNetFramework>$(TargetFrameworkVersion)</PlgxTargetNetFramework>
    </PropertyGroup>
  </Target>
  
  <!--
    <PlgxTargetOs> specifies the operating system "prerequisite", like
    the "plgx-prereq-os:" KeePass command-line parameter. Defaults to
    'Windows'.
  -->
  <PropertyGroup Condition=" '$(PlgxTargetOs)' == '' ">
    <PlgxTargetOs>Windows</PlgxTargetOs>
  </PropertyGroup>

  <!--
    <PlgxArchiveFileName> can be specified to override the base
    file name of the .PLGX archive. Defaults to $(AssemblyName).
  -->
  <Target Name="EnsurePlgxArchiveFileName" Outputs="PlgxArchiveFileName"
          Condition=" '$(PlgxArchiveFileName)' == '' ">
    <PropertyGroup>
      <PlgxArchiveFileName>$(AssemblyName)</PlgxArchiveFileName>
    </PropertyGroup>
  </Target>

  <!--
    <PlgxOuputFolder> specifies the directory for the generated .PLGX
    file. Defaults to $(OutputPath).
  -->
  <Target Name="EnsurePlgxOutputFolder" Outputs="PlgxOutputFolder"
          Condition=" '$(PlgxOutputFolder)' == '' ">
    <PropertyGroup>
      <PlgxOutputFolder>$(MSBuildProjectDirectory)\$(OutputPath)</PlgxOutputFolder>
    </PropertyGroup>
  </Target>

  <!--
    Check setting of PlgxUseCompiledResource, and when set 'true', warn
    if the build's target framework does not match the manifest
    (PlgxTargetNetFramework).
  -->
  <Target Name="PlgxValidateUseCompiledResource"
          Condition=" '$(PlgxUseCompiledResource)' != '' ">
    <Error Condition=" '$(PlgxUseCompiledResource.ToUpper())' != 'TRUE' and '$(PlgxUseCompiledResource.ToUpper())' != 'FALSE' "
         Text="Invalid value for &lt;PlgxUseCompiledResource&gt; property; the value should be 'true' or 'false'."/>
    <Warning Condition=" '$(PlgxUseCompiledResource.ToUpper())' == 'TRUE' and $(PlgxTargetNetFramework) != '$(TargetFrameworkVersion)' " 
         Text="Archiving .RESOURCE files targeting v$(TargetFrameworkVersion), but the .PLGX manifest targets v$(PlgxTargetNetFramework)."/>
  </Target>

  <!--
    <PlgxTargetOs> if specified can have one of two values.
  -->
  <Target Name="PlgxValidateTargetOs"
      Condition=" '$(PlgxTargetOs)' != '' ">
    <ErrorLog Condition=" '$(PlgxTargetOs.ToUpper())' != 'UNIX' and '$(PlgxTargetOs.ToUpper())' != 'WINDOWS' "
      Text="Optional &lt;PlgxTargetOs&gt; value not valid.  Currently, KeePass only recognizes the values 'Windows' or 'Unix'."/>
  </Target>

  <!--
    <PlgxTargetPtrSize> is used to specify the pointer size
    "prerequisite", like the "plgx-prereq-ptr:" KeePass command-line
    parameter.  Validate if set.
  -->
  <Target Name="PlgxValidateTargetPtrSize"
      Condition=" '$(PlgxTargetPtrSize)' != '' ">
    <Error Condition=" '$(PlgxTargetPtrSize)' != '8' and '$(PlgxTargetPtrSize)' != '4' "
      Text="Optional &lt;PlgxTargetPtrSize&gt; value invalid.  Currently, KeePass only recognizes the values '4' or '8'."/>
  </Target>

  <!--
    <ProductName> can be specified in SDK-style projects to generate
    AssemblyProductAttribute required by KeePass to identify plugin
    assemblies.  This target validates that.
  -->
  <Target Name="PlgxValidateProductName" 
      Condition=" '$(GenerateAssemblyInfo)' == 'true' and '$(Product)' != '' ">
    <Error Condition=" '$(Product)' != 'KeePass Plugin' "
      Text="&lt;Product&gt; property not set to 'KeePass Plugin', so KeePass will not load this plugin. Either set the property in the project, or disable AssemblyInfo.cs generation and explicitly set 'KeePass Plugin' in the AssemblyProductAttribute constructor."/>
  </Target>

  <Target Name="SetPlgxOutputPath"
          DependsOnTargets="EnsurePlgxOutputFolder;EnsurePlgxArchiveFileName"
          Outputs="PlgxOutputPath">
    <PropertyGroup>
      <PlgxOutputPath>$(PlgxOutputFolder)$(PlgxArchiveFileName).plgx</PlgxOutputPath>
    </PropertyGroup>
  </Target>
  
  <!--
    Extend 'clean' target to remove output file.
  -->
  <Target Name="PlgxDeleteOutputFile"
          DependsOnTargets="SetPlgxOutputPath">
    <Delete Files="$(PlgxOutputPath)" />
  </Target>

  <PropertyGroup>
    <PlgxBuildDependsOn>
      SetPlgxOutputPath;
      EnsurePlgxTargetNetFramework;
      PlgxValidateProductName;
      PlgxValidateUseCompiledResource;
      PlgxValidateTargetOs;
      PlgxValidateTargetPtrSize;
      Build
    </PlgxBuildDependsOn>
    <PlgxBuildInputs>
      $(MSBuildAllProjects);
      @(Compile);
      @(EmbeddedResource);
      @(None);
      @(Content);
      @(Reference);
    </PlgxBuildInputs>
    <CleanDependsOn>$(CleanDependsOn);PlgxDeleteOutputFile;</CleanDependsOn>
  </PropertyGroup>

  <UsingTask TaskName="PlgxBuildTask"  AssemblyFile="$(PlgxBuildTasksDir)PlgxBuildTasks.dll" />
  
  <Target Name="PlgxBuild" DependsOnTargets="$(PlgxBuildDependsOn)" AfterTargets="Build"
          Inputs="$(PlgxBuildInputs)"
          Outputs="$(PlgxOutputPath)"
          Condition=" '$(GeneratePlgx)' == 'true'">
    <PlgxBuildTask PlgxFileFolder="$(PlgxOutputFolder)"
        ProjectReferencesFolderName="$(PlgxReferencesArchivedFolderName)"
        ProjectSatelliteAssembliesFolderName="$(PlgxSatelliteAssembliesArchivedFolderName)"
        AssemblyName="$(AssemblyName)"
        ArchiveBaseFileName="$(PlgxArchiveFileName)"
        EmbeddedResource="@(EmbeddedResource)"
        ProjectFileFullPath="$(MSBuildProjectFullPath)"
        Compile="@(Compile)"
        SatelliteResource="@(IntermediateSatelliteAssembliesWithTargetPath)"
        None="@(None)"
        Content="@(Content)"
        Reference="@(Reference)"
        ResolvedReference="@(ReferenceCopyLocalPaths)"
        TargetOsMoniker="$(PlgxTargetOs)"
        TargetPointerSize="$(PlgxTargetPtrSize)"
        TargetNetFramework="$(PlgxTargetNetFramework)"
        TargetKpVersion="$(PlgxTargetKpVersion)"
        UseCompiledResource="$(PlgxUseCompiledResource)"
    />
    <Message Importance="high"
        Text="$(AssemblyName) -> $(PlgxOutputPath)"
    /> 
  </Target>
</Project>